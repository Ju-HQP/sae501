security:
    # Pour les mots de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 
             algorithm: 'bcrypt'
             # lvl of hashing, mini 4 pour le test, mais on indiquera 13 lors de la mise en prod
             cost:  8
    # Fournisseurs d'utilisateurs
    providers:
        benevole_provider:
            entity:
                class: App\Entity\Benevole
                property: mail_b # Champ unique pour identifier l'utilisateur

    # Définition des firewalls
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
        
            # lazy: true
            provider: benevole_provider
            custom_authenticators:
                - App\Security\AppAuthenticator 
            json_login:
                check_path: app_login
            logout:
                path: /logout
                target: /logout_msg
                invalidate_session: true
            entry_point: App\Security\AppAuthenticator

    # Règles d'accès
    access_control:
        - { path: ^/api/csrf_token, roles: PUBLIC_ACCESS }  #accessible sans authentification
        - { path: ^/api/login, roles: PUBLIC_ACCESS, methods: [POST, GET] }
        - { path: ^/api/actualites, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/projets, roles: PUBLIC_ACCESS, methods: [GET] }
        - { path: ^/api/projets, roles: ROLE_USER, methods: [POST,PUT] }
        - { path: ^/api/actualites, roles: ROLE_USER, methods: [POST,PUT] }
        - { path: ^/api/benevoles, roles: ROLE_ADMIN, methods: [POST,PUT,DELETE] }
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER] #permet à l'admin d'hérité par défaut de tous les accès du user
