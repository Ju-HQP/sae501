security:
    password_hashers:
        # auto hasher with default options for the Benevole class (and children)
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # # auto hasher with custom options for all PasswordAuthenticatedUserInterface instances
        # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        #     algorithm: 'bcrypt'
        #     # lvl of hashing, mini 4 pour le test, mais on indiquera 13 lors de la mise en prod
        #     cost:  4 
    providers:
        benevoles_provider:
            entity:
                class: App\Entity\Benevole
                property: mail_b # ou mail_b si vous utilisez l'email comme identifiant
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: benevoles_provider
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800
                path: /
                # by default, the feature is enabled by checking a checkbox in the
                # login form, uncomment the following line to always enable it.
                #always_remember_me: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon


